package ##repository_impl_package_name##;

import ##database_package_interface##;
import ##persistent_object_package_class##;
import ##persistent_object_criteria_package_class##;
import ##repository_package_interface##;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @author ##author_name##
 */
@Component
public class ##repository_impl_class_name## implements ##repository_interface_name## {

    private static final Logger logger = LoggerFactory.getLogger(##repository_impl_class_name##.class);

    @Autowired
    private ##database_interface_name## database;

    @Override
    public PageList<##persistent_object_class_name##> findList(##persistent_object_criteria_class_name## criteria) {
        try {
            List<##persistent_object_class_name##> list = database.findList(criteria);
            long totalNum = database.getTotalNum(criteria);

            PageList<##persistent_object_class_name##> result = new PageList<>(criteria);

            result.setData(list);
            result.setTotalNum(totalNum);
            return result;
        } catch (Throwable tr) {
            logger.error("findList failed, criteria: {}, throwable: ", criteria, tr);
            throw new BizException(ErrorEnum.FIND_ERR);
        }
    }

    @Override
    public ##persistent_object_class_name## find(Long id) {
        try {
            AssertUtils.isPositive(id, "id");

            return database.find(id);
        } catch (Throwable tr) {
            logger.error("find failed, id: {}, throwable: ", id, tr);
            throw new BizException(ErrorEnum.FIND_ERR);
        }
    }

    @Override
    public ##persistent_object_class_name## findBy##persistent_object_unique_name_upper_camel##(String ##persistent_object_unique_name_lower_camel##) {
        try {
            AssertUtils.nonEmpty(##persistent_object_unique_name_lower_camel##, "##persistent_object_unique_name_lower_camel##");

            return database.findBy##persistent_object_unique_name_upper_camel##(##persistent_object_unique_name_lower_camel##);
        } catch (Throwable tr) {
            logger.error("findBy##persistent_object_unique_name_upper_camel## failed, ##persistent_object_unique_name_lower_camel##: {}, throwable: ", ##persistent_object_unique_name_lower_camel##, tr);
            throw new BizException(ErrorEnum.FIND_ERR);
        }
    }

    @Override
    public long insertList(List<##persistent_object_class_name##> list) {
        try {
            AssertUtils.nonNull(list, "list");

            return database.insertList(list);
        } catch (Throwable tr) {
            logger.error("insertList failed, throwable: ", tr);
            throw new BizException(ErrorEnum.INSERT_ERR);
        }
    }

    @Override
    public int insert(##persistent_object_class_name## record) {
        try {
            AssertUtils.nonNull(record, "record");
            AssertUtils.isPositive(record.getId(), "record.id");

            return database.insert(record);
        } catch (Throwable tr) {
            logger.error("insert failed, record: {}, throwable: ", record, tr);
            throw new BizException(ErrorEnum.INSERT_ERR);
        }
    }

    @Override
    public long updateList(List<##persistent_object_class_name##> list) {
        try {
            AssertUtils.nonNull(list, "list");

            return database.updateList(list);
        } catch (Throwable tr) {
            logger.error("updateList failed, throwable: ", tr);
            throw new BizException(ErrorEnum.UPDATE_ERR);
        }
    }

    @Override
    public int update(##persistent_object_class_name## record) {
        try {
            AssertUtils.nonNull(record, "record");
            AssertUtils.isPositive(record.getId(), "record.id");

            return database.update(record);
        } catch (Throwable tr) {
            logger.error("update failed, record: {}, throwable: ", record, tr);
            throw new BizException(ErrorEnum.UPDATE_ERR);
        }
    }

    @Override
    public long deleteList(List<Long> ids) {
        try {
            AssertUtils.nonEmpty(ids, "ids");

            List<##persistent_object_class_name##> list = new ArrayList<>();
            for (Long id : ids) {
                AssertUtils.isPositive(id, "id");

                ##persistent_object_class_name## record = new ##persistent_object_class_name##();
                record.setId(id);
                record.setIsDeleted(id);
                record.setDeletedAt(new Date());

                list.add(record);
            }

            return database.updateList(list);
        } catch (Throwable tr) {
            logger.error("deleteList failed, throwable: ", tr);
            throw new BizException(ErrorEnum.DELETE_ERR);
        }
    }

    @Override
    public int delete(Long id) {
        try {
            AssertUtils.isPositive(id, "id");

            ##persistent_object_class_name## record = new ##persistent_object_class_name##();
            record.setId(id);
            record.setIsDeleted(id);
            record.setDeletedAt(new Date());

            return database.update(record);
        } catch (Throwable tr) {
            logger.error("delete failed, id: {}, throwable: ", id, tr);
            throw new BizException(ErrorEnum.DELETE_ERR);
        }
    }

}
