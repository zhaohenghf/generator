package ##controller_package_name##;

import ##data_transfer_object_package_class##;
import ##service_package_interface##;
import ##persistent_object_criteria_package_class##;
import ##view_object_create_request_package_class##;
import ##view_object_criteria_request_package_class##;
import ##view_object_update_request_package_class##;
import ##view_object_package_class##;
import ##view_object_mapper_package_interface##;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * @author ##author_name##
 */
@Api(value = "##controller_class_name##", tags = "##persistent_object_class_title##")
@RequestMapping("##mybatis_resource_table_name##")
@Validated
@RestController
public class ##controller_class_name## {

    private static final Logger logger = LoggerFactory.getLogger(##controller_class_name##.class);

    @Autowired
    private ##service_interface_name## service;

    @Autowired
    private ##view_object_mapper_interface_name## copier;

    @ApiOperation(value = "查询列表", produces = "application/json")
    @GetMapping(value = "/list")
    @ResponseBody
    public Result<VoList<##view_object_class_name##>> list(##view_object_criteria_request_class_name## request) {
        logger.info("list trace, request: {}", request);

        try {
            BizAssert.nonNull(request, ErrorEnum.NO_ARGS);
            ##persistent_object_criteria_class_name## criteria = copier.voToDto(request);

            PageList<##data_transfer_object_class_name##> dtoPage = service.findList(criteria);
            BizAssert.nonNull(dtoPage, ErrorEnum.NO_RESULT);

            List<##data_transfer_object_class_name##> dtoList = dtoPage.getData();
            List<##view_object_class_name##> voList = copier.dtoToVo(dtoList);

            VoList<##view_object_class_name##> voPage = new VoList<>(dtoPage, voList, request);
            return ResultUtils.toSuccess(voPage);
        } catch (BizException ex) {
            logger.error("list failed, request: {}, throwable: ", request, ex);
            return ResultUtils.fromException(ex);
        }
    }

    @ApiOperation(value = "通过主键，获取一条记录", produces = "application/json")
    @GetMapping(value = "/view")
    @ResponseBody
    public Result<##view_object_class_name##> view(@NotNull @RequestParam("id") Long id) {
        logger.info("view trace, id: {}", id);

        try {
            ##data_transfer_object_class_name## dtoRecord = service.find(id);
            ##view_object_class_name## voRecord = copier.dtoToVo(dtoRecord);

            return ResultUtils.toSuccess(voRecord);
        } catch (BizException ex) {
            logger.error("view failed, id: {}, throwable: ", id, ex);
            return ResultUtils.fromException(ex);
        }
    }

    @ApiOperation(value = "新增一条记录", produces = "application/json")
    @PostMapping(value = "/create")
    @ResponseBody
    public Result<Boolean> create(@Valid @RequestBody ##view_object_create_request_class_name## request) {
        logger.info("create trace, request: {}", request);

        try {
            ##data_transfer_object_class_name## record = copier.voToDto(request);
            boolean r = service.insert(record);

            return ResultUtils.toSuccess(r);
        } catch (BizException ex) {
            logger.error("create failed, request: {}, throwable: ", request, ex);
            return ResultUtils.fromException(ex);
        }
    }

    @ApiOperation(value = "通过主键，修改一条记录", produces = "application/json")
    @PostMapping(value = "/update")
    @ResponseBody
    public Result<Boolean> update(@Valid @RequestBody ##view_object_update_request_class_name## request) {
        logger.info("update trace, request: {}", request);

        try {
            ##data_transfer_object_class_name## record = copier.voToDto(request);
            boolean r = service.update(record);

            return ResultUtils.toSuccess(r);
        } catch (BizException ex) {
            logger.error("update failed, request: {}, throwable: ", request, ex);
            return ResultUtils.fromException(ex);
        }
    }

    @ApiOperation(value = "通过主键，删除一条记录", produces = "application/json")
    @DeleteMapping(value = "/delete")
    @ResponseBody
    public Result<Boolean> delete(@NotNull @RequestParam("id") Long id) {
        logger.info("delete trace, id: {}", id);

        try {
            boolean r = service.delete(id);

            return ResultUtils.toSuccess(r);
        } catch (BizException ex) {
            logger.error("delete failed, id: {}, throwable: ", id, ex);
            return ResultUtils.fromException(ex);
        }
    }

}
